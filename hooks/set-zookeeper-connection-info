#!/usr/bin/ruby

def gear_info(tokens, gear_id, &block)
  gears = {}
  if tokens.length == 1
    gears[gear_id] = tokens.first
  else
    while not tokens.empty?
      gear, delim, data = tokens.shift(3)
      data = yield data if block_given?
      raise "Invalid data" unless delim == '='
      gears[gear] = data
      tokens.shift if tokens.first == ' '
    end
  end
  gears
end

def tokenize(s)
  tokens = []
  a = ""
  state = :start
  s.scan(/([ \t]+)|(\\')|(')|([^ \t']+)/) do |args|
    space, escaped_delim, delim, text = args
    case state
    when :start
      case
      when space then " "
      when escaped_delim then raise "Unexpected delimiter"
      when delim then state = :within_delim
      when text then tokens << text
      else raise "error"
      end
    when :within_delim
      case
      when space then a << space
      when escaped_delim then a << '"'
      when delim then tokens << a; a = ""; state = :start
      when text then a << text
      end
    end
  end
  tokens << a if a.length > 0
  tokens
end

gear_id = ARGV.shift
domain = ARGV.shift
tokens = tokenize(ARGV.shift)

# better if this is in creation order (oldest first)
gears = gear_info(tokens, gear_id) do |d| 
  d.split(' ').map{ |s| s.scan(/\A(.+?)=(.*?);?\Z/).first }.inject({}){ |h, (k,v)| h[k] = v if v != ''; h }
end
gears.each_pair{ |k,v| puts "Found gear #{k}#{k == gear_id ? '* ' : ''} with data #{v.inspect}" }
gear_ids = gears.keys.sort.uniq

puts "-------"

# Select the most common password, or if there are multiple, the latest in alphabetical order
password = gears.values.map{ |v| v['S_ZOOKEEPER_DB_PASSWORD'] }.inject(Hash.new(0)) { |total, e| total[e] += 1 ; total }.each_pair.sort_by{ |(k,v)| [v, k] }.last[0]
# An array of all of the host:port pairs for the cluster
hosts = gears.map{ |k,v| "#{v['S_ZOOKEEPER_DB_HOST']}:#{v['S_ZOOKEEPER_DB_PORT']}" }.compact.uniq.sort
# A list of key value pairs in <gear id> => <host:port pair> for the cluster
members = gear_ids.map{ |k| v=gears[k]; "#{k}=#{v['S_ZOOKEEPER_DB_HOST']}:#{v['S_ZOOKEEPER_DB_PORT']}:#{v['S_ZOOKEEPER_DB_LEADER_PORT']}" }

server_index = gear_ids.index(gear_id) + 1
puts "Gear #{gear_id} will have index #{server_index}"

File.delete('env/ZOOKEEPER_CLI') rescue nil
File.open('env/ZOOKEEPER_PASSWORD', 'w'){ |f| f.puts password }
File.open('env/ZOOKEEPER_CLUSTER_MEMBERS', 'w'){ |f| f.puts members.join("\n") }
File.open('env/ZOOKEEPER_CLUSTER', 'w'){ |f| f.puts hosts.join(",") }
File.open('env/ZOOKEEPER_CLUSTER_ID', 'w'){ |f| f.puts server_index }